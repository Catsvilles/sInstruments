CLASS:: SDrone
SUMMARY:: a droning sInstrument
CATEGORIES:: SInstruments
RELATED:: Overviews/sInstrumentsOverview, Classes/SDroneAmplitudes, Classes/SDroneFrequencies

DESCRIPTION::
Based on the Ndef used for 'Strange Foreign Bodies'.

See file CODE::instruments/sDrone.scd:: for a complete example.

CLASSMETHODS::

METHOD::new
create a new drone instrument. the server must be running before starting.

ARGUMENT::numVoices
the number of voices for this instrument.

ARGUMENT::target
if CODE::nil:: then the localhost server's default group will be used.

ARGUMENT::outbus
where to send the stereo output.

ARGUMENT::addAction
a LINK::Classes/Symbol::.

ARGUMENT::args
extra arguments as an LINK::Classes/Array:: with key/value pairs.

METHOD::type
a LINK::Classes/Symbol:: describing the type of sound produced for example CODE::\SineFB::.

INSTANCEMETHODS::

PRIVATE::initSDrone, prCreateSynths

METHOD::defName
a LINK::Classes/Symbol:: used for the internal LINK::Classes/SynthDef::.

METHOD::func
a LINK::Classes/Function:: that will be wrapped inside the internal LINK::Classes/SynthDef::.

METHOD::mix
a LINK::Classes/Function:: that will be wrapped inside the internal effect LINK::Classes/SynthDef::.

for example
CODE::
mix {
	^{|snd|
		Mix(snd)*0.5;
	};
}
::
or
CODE::
mix {
	^{|snd|
		reduce(snd.asArray, \hypot);
	};
}
::

METHOD::release
fade out the sound and free all internal nodes and busses.

ARGUMENT::releaseTime
fade out time in seconds.

ARGUMENT::onFreeFunc
a LINK::Classes/Function:: to be evaluated after the reverberating sound disappeared.

METHOD::xset
cross fade to a new set of voices. will also set parameters for all internal nodes and save them in the arguments dictionary. set the CODE::\atk:: and CODE::\rel:: parameters to define cross fade time (both are 4 by default).

ARGUMENT::... args
an LINK::Classes/Array:: with key/value pairs. can also be a single key/value pair.

CODE::
s.boot;
~drone= SDrone(3);
~drone.xset(\frequencies, [400, 500, 600]);  //cross fade
~drone.xset(\frequencies, [666, 777, 888]);
~drone.release;
::

METHOD::set
set parameters for all internal nodes and save them in the arguments dictionary.

ARGUMENT::... args
an LINK::Classes/Array:: with key/value pairs. can also be a single key/value pair.

CODE::
~drone= SDrone(3);
~drone.set(\frequencies, [400, 500, 600]);  //glissando
~drone.set(\frequencies, [666, 777, 888]);
~drone.set([\atk, 0.1, \rel, 1]);  //set attack and release for all internal nodes
~drone.set(\on, 1);  //set \sDrone_syn on to 1 (only this node will understand it)
~drone.release;
::

METHOD::setAmplitudes
convenience method for CODE::.set(\amplitudes, ...)::

ARGUMENT::arr
an array of floats (0.0 to 1.0).

METHOD::getAmplitudes
read the amplitude control rate bus synchronously.

RETURNS::
an array of floats (0.0 to 1.0).

METHOD::setFrequencies
convenience method for CODE::.set(\frequencies, ...)::

ARGUMENT::arr
an array of floats in Hz.

METHOD::xsetFrequencies
convenience method for CODE::.xset(\frequencies, ...)::
will crossfade.

ARGUMENT::arr
an array of floats in Hz.

METHOD::getFrequencies
read the frequencies control rate bus synchronously.

RETURNS::
an array of floats in Hz.

EXAMPLES::

CODE::
a= SDrone(5);
a.set(\flag, 2)
a.getFrequencies
a.setFrequencies({100.0.exprand(500)}!5)  //gliss
a.setFrequencies({100.0.exprand(500)}!5)
a.xsetFrequencies({100.0.exprand(500)}!5)  //xfade
a.release(1)
::

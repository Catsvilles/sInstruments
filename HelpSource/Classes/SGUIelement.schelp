CLASS:: SGUIelement
SUMMARY:: a value with one or more views
CATEGORIES:: SInstruments
RELATED:: Overviews/sInstrumentsOverview

DESCRIPTION::
This is a value with one or more views attached.

Views like sliders and numberboxes are attached using the link::#-addView:: method. Optionally one can provide a link::Classes/ControlSpec::.

Attached views only redraw when link::#-update:: is called (e.g. inside a slow running link::Classes/Routine::). There is no need to defer these update calls and the actual redrawing will only happen if the value has changed since last call to update.

The link::#-action:: function you set is independent of the views and will be called directly when the value changes (e.g. incoming data from a sensor at very high rate - the action function will be called each time while any attached views will only redraw when update is called).

Changing the value of a view using mouse or keyboard will call the action function immediately.

CLASSMETHODS::

INSTANCEMETHODS::

PRIVATE::initSGUIelement, prUpdate

METHOD::action
a link::Classes/Function::. can be called without deferring.

METHOD::value
get or set the current value. nothing special. normalised.
action is only called if value has changed.

METHOD::valueAction
set value and always call action - also on repeated values. useful for button toggles.

METHOD::doAction
always call action.

METHOD::asView
layout support. only latest (last) view is returned. makes adding views to layouts easier.

METHOD::views
an array with all added views.

METHOD::addView
add a view as a dependancy. also with a spec. automatically sets up the view action function.

ARGUMENT::view
some view. not complex ones like RangeSlider. for those use subclasses.

ARGUMENT::spec
a link::Classes/ControlSpec::. if not provided a default one will be created.

METHOD::update
call at regular intervals (typically a slow fps AppClock routine). if the value has changed the view will redraw.

EXAMPLES::

CODE::
(
var win;
var element= SGUIelement();
var elementSpec= \freq.asSpec;
var fps= 5;  //this will be the slow update rate of the gui

//fake some fast changing sensor data
r= Routine.run({
	inf.do{
		NetAddr.localAddr.sendMsg(\freq, 200.0.exprand(2000));
		(1/40).wait;  //here how fast the value will be changing
	};
});

//set up window and attach two views
win= Window("SGUIelement test", 200@100);
win.view.layout_(VLayout(
	element.addView(Slider().orientation_(\horizontal)),
	element.addView(NumberBox(), elementSpec),
));
CmdPeriod.doOnce({win.close});
win.onClose({r.stop});
win.front;

//element action function (fast updating - independent of gui)
element.action= {|val|
	val.postln;
	//here would be the place for code that set a synth parameter or bus value
};

//network
OSCFunc({|msg| element.value= elementSpec.unmap(msg[1])}, \freq);

//gui updater
Routine({
	inf.do{
		element.update;  //make the views redraw (if value changed)
		(1/fps).wait;
	};
}).play(AppClock);
)

r.stop;  //and then try manually changing the slider/numberbox



//softset example
MIDIIn.connectAll;
(
var win;
var element= SGUIelement();
var elementSpec= \amp.asSpec;
var fps= 15;

//set up midi with softset
MIDIdef.cc(\softset, {|msg|
	msg.postln;
	element.softSetValue(msg/127);  //move a controller up to ~75%
});
CmdPeriod.doOnce({MIDIdef.cc(\softset).free});

//set up window with views
win= Window("SGUIelement softset test", 200@100);
win.view.layout_(VLayout(
	element.addView(Slider().orientation_(\horizontal)),
	element.addView(NumberBox(), elementSpec),
));
CmdPeriod.doOnce({win.close});
win.onClose({r.stop});
win.front;

element.value= 0.75;  //set a value that will be picked up when midi cc is nearby

//gui updater
Routine({
	inf.do{
		element.update;
		(1/fps).wait;
	};
}).play(AppClock);
)
::

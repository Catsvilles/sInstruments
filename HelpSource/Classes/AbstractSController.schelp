CLASS:: AbstractSController
SUMMARY:: an abstract class for all sInstrument controllers
CATEGORIES:: SInstruments
RELATED:: Overviews/sInstrumentsOverview, Classes/AbstractSInstrument

DESCRIPTION::

Multi-channel control rate bus+synth for amplitudes, frequencies, panning positions etc.

NOTE::
Do not instantiate. Use the subclasses.
::

CLASSTREE:: AbstractSController

CLASSMETHODS::

METHOD::new

ARGUMENT::numChannels
number of internal control rate channels.

ARGUMENT::target
used to figure out which server to use for the internal bus and synth.
if CODE::nil:: then the default (localhost) server will be used.

ARGUMENT::args
extra arguments as an LINK::Classes/Array:: with key/value pairs.

INSTANCEMETHODS::

PRIVATE::initAbstractSController

METHOD::syn
the LINK::Classes/Synth:: instance.

METHOD::bus
the LINK::Classes/Bus:: instance (control rate).

METHOD::defName
the LINK::Classes/SynthDef:: name.

RETURNS::
a generated LINK::Classes/Symbol:: matching class name and number of channels.

METHOD::free
free the internal synth and bus that was created for this controller instance.

METHOD::def
creates a synthdef.

NOTE::must be implemented by subclasses::

for example...
CODE::
SDroneFrequencies : AbstractSController {
	def {
		^SynthDef(this.defName, {|lag= 3,  //NOTE name required
			fmod= 50, fmul= 0.1, famp= 0, flag= 0, curv= 0, warp= 4|
			var rates= (1..this.numChannels)*fmul.lag(lag);
			var freqs= \frequencies.kr(99!this.numChannels+1.0.rand2);
			var mods= SinOsc.ar(fmod.lag(lag)+rates, Rand(0, 2pi), famp, 1);
			freqs= freqs.varlag(flag, curv, warp, freqs);
			freqs= freqs*mods;
			Out.kr(\sController_bus.ir, freqs);  //NOTE bus required
		});
	}
}
::

RETURNS::
a LINK::Classes/SynthDef:: that has the argument CODE::\sController_bus:: for setting the output control rate bus. The name of the SynthDef must be CODE::this.defName::.

METHOD::numChannels
number of internal control rate channels.

EXAMPLES::
